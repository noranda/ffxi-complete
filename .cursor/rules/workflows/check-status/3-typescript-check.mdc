---
description: "Workflow step 3: TypeScript compilation check and type error resolution step"
globs:
---

# Step 3: TypeScript Check and Fix

## Goal

Ensure ALL TypeScript errors and warnings are resolved - both compilation errors AND type mismatches that
developers see in their IDE.

**Critical Note**: `tsc --noEmit` only catches compilation-blocking errors. IDE diagnostics catch ALL TypeScript
errors including type mismatches, incorrect prop types, and other issues that don't prevent compilation but are
still type errors that developers see and need to fix.

## Required Context/Inputs

- All ESLint and test issues from previous steps must be resolved
- TypeScript configuration should be properly set up

## Process

### 1. Initial TypeScript Check

**Primary Check - IDE Diagnostics (catches ALL type errors):**

```bash
# Use IDE diagnostics to get comprehensive type checking results
# This catches all TypeScript errors that developers see in their IDE
```

**Secondary Check - Compilation Verification:**

```bash
yarn type-check
```

**Important**: The IDE diagnostics check is the primary validation method as it shows ALL TypeScript errors
including type mismatches, incorrect prop types, and other issues that might not prevent compilation but are
still type errors.

### 2. Analyze TypeScript Errors

If any TypeScript errors are found (from IDE diagnostics or compilation):

1. **Read error messages carefully**:
   - Note file paths and line numbers
   - Understand the specific type error
   - Identify if it's a type annotation, inference, or compatibility issue

2. **Categorize error types**:
   - Missing type annotations
   - Type mismatches in assignments (e.g., incorrect prop types)
   - Incorrect function signatures
   - Missing properties on objects
   - Import/export type issues
   - Generic type problems
   - Null/undefined safety issues
   - React prop type mismatches (common with SVG/DOM elements)
   - Event handler type issues

### 3. Manual Fix Process

#### Common TypeScript Fixes

1. **Type Annotation Issues**:
   - Add explicit type annotations where needed
   - Fix incorrect type declarations
   - Update function parameter and return types

2. **Type Compatibility Problems**:
   - Fix type mismatches in assignments
   - Add type assertions where appropriate (sparingly)
   - Update object property types
   - Fix array and generic type usage

3. **Import/Export Type Issues**:
   - Add `type` keyword for type-only imports
   - Fix default vs named import/export mismatches
   - Resolve module declaration issues

4. **Null/Undefined Safety**:
   - Add null checks where needed
   - Use optional chaining (`?.`) appropriately
   - Fix undefined property access

5. **Function Signature Issues**:
   - Fix parameter types and counts
   - Update return type annotations
   - Resolve callback function type mismatches

6. **React/Component Specific**:
   - Fix component prop type definitions
   - Update event handler types
   - Resolve ref and state type issues
   - Fix SVG/DOM element prop mismatches (e.g., use `<title>` element instead of `title` prop)
   - Correct HTML attribute vs React prop differences

### 4. Incremental Fixing

For each TypeScript error:

1. **Focus on one file at a time**
2. **Run type check on specific file** (if possible):

   ```bash
   yarn tsc --noEmit path/to/file.ts
   ```

3. **Apply fixes and re-check**
4. **Move to next error only after current one is resolved**

### 5. Validation Check

After all fixes, run comprehensive validation:

**Primary Validation - IDE Diagnostics:**

```bash
# Check IDE diagnostics to ensure ALL TypeScript errors are resolved
# This is the definitive check - must show 0 errors across all files
```

**Secondary Validation - Compilation Check:**

```bash
yarn type-check
```

**Critical**: Both checks must pass. IDE diagnostics catching errors while compilation passes indicates the
workflow missed type issues that developers would see.

### 6. Cross-Validation with ESLint

Since ESLint also catches TypeScript errors, verify ESLint still passes:

```bash
yarn lint
```

### 7. Stop Conditions

**Stop and ask for user guidance if**:

- Type errors indicate fundamental architectural issues
- Fixes would require changing core type definitions
- Errors suggest missing or incorrect third-party type declarations
- Type errors indicate breaking changes in dependencies
- Complex generic type issues that need design decisions
- Errors in generated or external type files
- Multiple related type errors that suggest broader refactoring needed

## Expected Output

- **IDE diagnostics show 0 TypeScript errors across all files** (primary requirement)
- TypeScript compilation succeeds with 0 errors and 0 warnings
- All type annotations are correct and consistent
- Code maintains type safety
- ESLint continues to pass after TypeScript fixes

## Success Criteria

**Primary Success Criteria:**

- IDE diagnostics must show 0 TypeScript errors across all files
- This is the definitive measure of TypeScript correctness

**Secondary Success Criteria:**

```bash
yarn type-check
# Should output: âœ¨ Done (no compilation errors)
```

**Note**: If compilation passes but IDE shows errors, the TypeScript check has FAILED and issues must be resolved.

## Next Step

Once TypeScript check passes completely, proceed to Step 4: Formatting Check.
