---
description: "Workflow step 3: Task implementation with quality checks and code guidelines verification"
globs:
---

# Task List Management

Guidelines for managing task lists in markdown files to track progress on completing a PRD

## Task Implementation

- **One sub-task at a time:** Do **NOT** start the next sub-task until you ask the user for permission and
  they say "yes" or "y"
- **MANDATORY Completion Protocol for ANY Task:**
  1. **Complete the implementation work**
  2. **Run Status Checks** (following status-check-reporting.mdc format):
     - `yarn lint` - Check for ESLint errors
     - `yarn test --run` - Run all tests without watch mode
     - `yarn type-check` - TypeScript compiler check
     - `yarn prettier --check .` - Format verification
  3. **Code Guidelines Assessment** (following code-guidelines-assessment.mdc methodology):
     - **ONLY for files added or edited during this task**
     - Use `git status --porcelain` to identify changed files
     - **MANDATORY: Check ALL 4 code-standards fragments against EVERY line in EVERY changed file:**
       - typescript-patterns.mdc
       - component-patterns.mdc
       - code-documentation.mdc
       - code-quality.mdc
     - **NO SHORTCUTS ALLOWED**: Every rule in every fragment must be checked against every applicable line
     - **NO SAMPLING**: Must examine entire file content, not representative sections
     - **NO SKIPPING**: Cannot skip any rules or parts of rules - complete assessment required
     - Document complete assessment with specific line evidence for each fragment
     - Fix ANY violations immediately before proceeding
  4. **Status Report** - Print comprehensive status showing:
     - Status checks results (ðŸŸ¢/ðŸŸ /ðŸ”´ for lint, tests, types, format)
     - Code guidelines assessment results for changed files
     - Confirmation that everything is ready for task completion
  5. **ONLY THEN** mark task as completed by changing `[ ]` to `[x]`
  6. **If all subtasks** underneath a parent task are now `[x]`, also mark the **parent task** as completed
  7. **Pause and wait** for user's go-ahead before starting next task

- **Zero Tolerance Policy:**
  - **ðŸ”´ Red status:** MUST fix immediately before proceeding to next step
  - **ðŸŸ  Orange status:** MUST fix unless explicitly documented as acceptable sub-task
  - **Code violations:** ANY non-adherence to ANY rule in ANY code-standards fragment must be fixed before task completion
  - **Complete coverage:** ALL 4 code-standards fragments must be assessed against ALL lines in ALL changed files
  - **No exceptions:** Cannot proceed to next task until ALL checks are green and ALL guidelines verified with complete evidence

- **TDD emphasis:** When implementing features (not setup tasks), follow Test-Driven Development:
  - Write tests FIRST before implementation
  - Implement minimal code to make tests pass
  - Refactor while keeping tests green

## Task List Maintenance

1. **Update the task list as you work:**
   - Mark tasks and subtasks as completed (`[x]`) per the protocol above.
   - Add new tasks as they emerge.

2. **Maintain the "Relevant Files" section:**
   - List every file created or modified.
   - Give each file a one-line description of its purpose.

## AI Instructions

When working with task lists, the AI must:

1. **Before starting:** Check which sub-task is next
2. **During work:** Regularly update the task list file after finishing any significant work
3. **After implementation:** Follow the MANDATORY Completion Protocol:
   - Run all status checks (`yarn lint`, `yarn test --run`, `yarn type-check`, `yarn prettier --check .`)
   - Identify changed files using `git status --porcelain`
   - **EXHAUSTIVE Code Guidelines Assessment:** Check ALL 4 code-standards fragments against EVERY line in
     EVERY changed file:
     - typescript-patterns.mdc: Every type definition, shared component types, utility types
     - component-patterns.mdc: Every export pattern, styling with tailwind-variants
     - code-documentation.mdc: Every exported item JSDoc, inline commenting
     - code-quality.mdc: Every error pattern, testing considerations, performance guidelines
   - **COMPLETE EVIDENCE REQUIRED:** Document specific line numbers and findings for each fragment
   - Fix ANY violations immediately before proceeding
   - Print comprehensive status report with complete evidence for all 4 fragments
   - ONLY mark task as completed (`[x]`) after ALL checks pass and ALL 4 fragments verified with complete
     evidence
4. **Task completion:** Mark parent task `[x]` once ALL subtasks are `[x]`
5. **File maintenance:** Keep "Relevant Files" section accurate and up to date
6. **New tasks:** Add newly discovered tasks as they emerge
7. **User approval:** Pause after each task completion and wait for user's go-ahead

## Critical Requirements

- **NO SHORTCUTS:** Every task completion MUST follow the full protocol with ALL 4 fragments
- **NO SAMPLING:** Code guidelines assessment must examine EVERY line in EVERY file, not representative sections
- **NO SKIPPING:** Cannot skip ANY rules or ANY parts of rules in ANY fragment
- **NO ASSUMPTIONS:** Manual verification required before tool validation for EVERY fragment
- **NO EXCEPTIONS:** Zero tolerance for red or orange status without explicit documentation
- **COMPLETE COVERAGE:** ALL 4 code-standards fragments MUST be checked against ALL lines in ALL changed files
- **EVIDENCE-BASED:** All assessments must include specific line numbers and evidence for EVERY fragment
- **SYSTEMATIC:** Use the fragment-by-fragment assessment template for ALL 4 code standards
- **EXHAUSTIVE DOCUMENTATION:** Must document findings for every fragment, even if compliant

**ABSOLUTE REQUIREMENT: Every line in every changed file must be checked against every applicable rule in
all 4 code-standards fragments. No task can be marked complete without complete verification of all fragments.**
