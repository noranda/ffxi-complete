---
description: "Workflow step 3: Task implementation with quality checks and code guidelines verification"
globs:
---

# Task List Management

Guidelines for managing task lists in markdown files to track progress on completing a PRD

## Task Implementation

- **One sub-task at a time:** Do **NOT** start the next sub-task until you ask the user for permission and
  they say "yes" or "y"

## Development Quality Maintenance

**MANDATORY during development (especially complex refactoring):**

- **Incremental Quality Checks:** After making significant changes to files, run intermediate checks:
  1. **Format Early and Often:** Run `yarn prettier --write .` after any major code changes
  2. **Lint Frequently:** Run `yarn lint --fix` to catch and auto-fix issues early
  3. **Type Check Regularly:** Run `yarn type-check` after TypeScript changes
  4. **Test Continuously:** Run relevant tests with `yarn test --run [pattern]` during development

- **File Management:**
  1. **No Backup Files:** Never commit `.bak`, `.backup`, or similar temporary files
  2. **Clean Up Immediately:** Delete any temporary/backup files created during refactoring
  3. **Single Source of Truth:** Maintain only the current version of each file

- **Complex Refactoring Protocol:**
  1. **Plan the changes:** Identify all files that need modification
  2. **Make incremental changes:** Edit one file or concept at a time
  3. **Format after each file:** Run `yarn prettier --write [file]` after editing each file
  4. **Check compilation:** Run `yarn type-check` after TypeScript changes
  5. **Validate incrementally:** Don't wait until the end to check for basic errors
  6. **Clean up artifacts:** Remove any backup or temporary files immediately

- **MANDATORY TDD Approach for ALL Development Tasks:**
  1. **RED Phase:** Write failing tests FIRST
     - Analyze requirements and write comprehensive test cases
     - Ensure tests fail for the right reasons (feature not implemented)
     - Cover happy path, error cases, edge cases, and boundary conditions
  2. **GREEN Phase:** Write minimal implementation to make tests pass
     - Implement only what's needed to make tests pass
     - Avoid over-engineering or adding extra features
     - Focus on making tests pass, not perfect code
  3. **REFACTOR Phase:** Clean up code while maintaining green tests
     - Improve code structure, readability, and maintainability
     - Extract functions, remove duplication, improve naming
     - Ensure all tests remain green throughout refactoring
  4. **ðŸŽ¯ TDD COMPLETION CHECKPOINT** ðŸŽ¯
     - **STOP HERE** and present TDD cycle completion to user
     - **USER CONFIRMATION REQUIRED** before proceeding to completion protocol
     - Show summary: âœ… RED â†’ âœ… GREEN â†’ âœ… REFACTOR phases completed
     - **COLORFUL REMINDER**: ðŸš¨ **IMPORTANT** ðŸš¨ Once user confirms TDD work, AI must continue with remaining
       completion protocol items (Status Checks, Code Guidelines Assessment, etc.)
     - **DO NOT SKIP**: The completion protocol items are MANDATORY after TDD confirmation
- **MANDATORY Completion Protocol for ANY Task:**
  1. **Complete the TDD cycle (RED-GREEN-REFACTOR) for implementation work**
  2. **Run Status Checks** (using check-status workflow):
     - `yarn lint` - Check for ESLint errors
     - `yarn test --run` - Run all tests without watch mode
     - `yarn type-check` - TypeScript compiler check
     - `yarn prettier --check .` - Format verification
  3. **Code Guidelines Assessment** (following code-guidelines-assessment.mdc methodology):
     - **ONLY for files added or edited during this task**
     - Use `git status --porcelain` to identify changed files
     - **MANDATORY: Check ALL 4 code-standards fragments against EVERY line in EVERY changed file:**
       - typescript-patterns.mdc
       - component-patterns.mdc
       - code-documentation.mdc
       - code-quality.mdc
     - **NO SHORTCUTS ALLOWED**: Every rule in every fragment must be checked against every applicable line
     - **NO SAMPLING**: Must examine entire file content, not representative sections
     - **NO SKIPPING**: Cannot skip any rules or parts of rules - complete assessment required
     - Document complete assessment with specific line evidence for each fragment
     - Fix ANY violations immediately before proceeding
  4. **TDD Verification** - Confirm RED-GREEN-REFACTOR cycle completion:
     - âœ… Tests written FIRST (RED phase documented)
     - âœ… Minimal implementation created (GREEN phase documented)
     - âœ… Code refactored while maintaining green tests (REFACTOR phase documented)
  5. **Status Report** - Print comprehensive status showing:
     - TDD cycle completion (ðŸŸ¢ RED-GREEN-REFACTOR documented/ðŸ”´ TDD not followed)
     - Status checks results (ðŸŸ¢/ðŸŸ /ðŸ”´ for lint, tests, types, format)
     - Code guidelines assessment results for changed files
     - Confirmation that everything is ready for task completion
  6. **ONLY THEN** mark task as completed by changing `[ ]` to `[x]`
  7. **If all subtasks** underneath a parent task are now `[x]`, also mark the **parent task** as completed
  8. **Pause and wait** for user's go-ahead before starting next task

- **Zero Tolerance Policy:**
  - **ðŸ”´ TDD violations:** MUST follow RED-GREEN-REFACTOR cycle for ALL development tasks - no exceptions
  - **ðŸ”´ Red status:** MUST fix immediately before proceeding to next step
  - **ðŸŸ  Orange status:** MUST fix unless explicitly documented as acceptable sub-task
  - **Code violations:** ANY non-adherence to ANY rule in ANY code-standards fragment must be fixed before task completion
  - **Complete coverage:** ALL 4 code-standards fragments must be assessed against ALL lines in ALL changed files
  - **No exceptions:** Cannot proceed to next task until ALL checks are green, TDD cycle complete, and ALL
  guidelines verified with complete evidence

## Task List Maintenance

1. **Update the task list as you work:**
   - Mark tasks and subtasks as completed (`[x]`) per the protocol above.
   - Add new tasks as they emerge.

2. **Maintain the "Relevant Files" section:**
   - List every file created or modified.
   - Give each file a one-line description of its purpose.

## AI Instructions

When working with task lists, the AI must:

1. **Before starting:** Check which sub-task is next
2. **During development:** Follow MANDATORY TDD cycle:
   - **RED:** Write failing tests first, document what you're testing and why
   - **GREEN:** Write minimal code to make tests pass, document implementation decisions
   - **REFACTOR:** Clean up code while maintaining green tests, document improvements made
3. **During work:** Regularly update the task list file after finishing any significant work
4. **After implementation:** Follow the MANDATORY Completion Protocol:
   - Run all status checks (`yarn lint`, `yarn test --run`, `yarn type-check`, `yarn prettier --check .`)
   - Identify changed files using `git status --porcelain`
   - **EXHAUSTIVE Code Guidelines Assessment:** Check ALL 4 code-standards fragments against EVERY line in
     EVERY changed file:
     - typescript-patterns.mdc: Every type definition, shared component types, utility types
     - component-patterns.mdc: Every export pattern, styling with tailwind-variants
     - code-documentation.mdc: Every exported item JSDoc, inline commenting
     - code-quality.mdc: Every error pattern, testing considerations, performance guidelines
   - **COMPLETE EVIDENCE REQUIRED:** Document specific line numbers and findings for each fragment
   - Fix ANY violations immediately before proceeding
     - Verify and document TDD cycle completion (RED-GREEN-REFACTOR)
     - Print comprehensive status report with complete evidence for all 4 fragments
     - ONLY mark task as completed (`[x]`) after ALL checks pass, TDD cycle complete, and ALL 4 fragments
       verified with complete evidence
5. **Task completion:** Mark parent task `[x]` once ALL subtasks are `[x]`
6. **File maintenance:** Keep "Relevant Files" section accurate and up to date
7. **New tasks:** Add newly discovered tasks as they emerge
8. **User approval:** Pause after each task completion and wait for user's go-ahead

## Critical Requirements

- **MANDATORY TDD:** Every development task MUST follow RED-GREEN-REFACTOR cycle - no exceptions
- **TDD DOCUMENTATION:** Must document each phase of TDD cycle with evidence of tests-first approach
- **NO TDD SHORTCUTS:** Cannot write implementation before tests, cannot skip refactor phase
- **NO SHORTCUTS:** Every task completion MUST follow the full protocol with ALL 4 fragments
- **NO SAMPLING:** Code guidelines assessment must examine EVERY line in EVERY file, not representative sections
- **NO SKIPPING:** Cannot skip ANY rules or ANY parts of rules in ANY fragment
- **NO ASSUMPTIONS:** Manual verification required before tool validation for EVERY fragment
- **NO EXCEPTIONS:** Zero tolerance for red or orange status without explicit documentation
- **COMPLETE COVERAGE:** ALL 4 code-standards fragments MUST be checked against ALL lines in ALL changed files
- **EVIDENCE-BASED:** All assessments must include specific line numbers and evidence for EVERY fragment
- **SYSTEMATIC:** Use the fragment-by-fragment assessment template for ALL 4 code standards
- **EXHAUSTIVE DOCUMENTATION:** Must document findings for every fragment, even if compliant

**ABSOLUTE REQUIREMENTS:**

1. **TDD COMPLIANCE:** Every development task must demonstrate RED-GREEN-REFACTOR cycle with documented evidence
2. **CODE STANDARDS:** Every line in every changed file must be checked against every applicable rule in all 4
   code-standards fragments
3. **NO COMPLETION:** No task can be marked complete without TDD cycle documentation AND complete verification of all fragments
