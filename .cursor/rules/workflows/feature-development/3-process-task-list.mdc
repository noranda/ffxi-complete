---
description: "Workflow step 3: Task implementation with quality checks and code guidelines verification"
globs:
---

# Task List Management

Guidelines for managing task lists in markdown files to track progress on completing a PRD

## Task Implementation

- **One sub-task at a time:** Do **NOT** start the next sub-task until you ask the user for permission and
  they say "yes" or "y"

## Development Quality Maintenance

**MANDATORY during development (especially complex refactoring):**

- **Incremental Quality Checks:** After making significant changes to files, run intermediate checks:
  1. **Format Early and Often:** Run `yarn prettier --write .` after any major code changes
  2. **Lint Frequently:** Run `yarn lint --fix` to catch and auto-fix issues early
  3. **Type Check Regularly:** Run `yarn type-check` after TypeScript changes
  4. **Test Continuously:** Run relevant tests with `yarn test --run [pattern]` during development

- **File Management:**
  1. **No Backup Files:** Never commit `.bak`, `.backup`, or similar temporary files
  2. **Clean Up Immediately:** Delete any temporary/backup files created during refactoring
  3. **Single Source of Truth:** Maintain only the current version of each file

- **Complex Refactoring Protocol:**
  1. **Plan the changes:** Identify all files that need modification
  2. **Make incremental changes:** Edit one file or concept at a time
  3. **Format after each file:** Run `yarn prettier --write [file]` after editing each file
  4. **Check compilation:** Run `yarn type-check` after TypeScript changes
  5. **Validate incrementally:** Don't wait until the end to check for basic errors
  6. **Clean up artifacts:** Remove any backup or temporary files immediately

- **MANDATORY TDD Approach for ALL Development Tasks:**
  1. **RED Phase:** Write failing tests FIRST
     - Analyze requirements and write comprehensive test cases
     - Ensure tests fail for the right reasons (feature not implemented)
     - Cover happy path, error cases, edge cases, and boundary conditions
     - **Document what you're testing and why** - Provide clear rationale for test cases
  2. **GREEN Phase:** Write minimal implementation to make tests pass
     - Implement only what's needed to make tests pass
     - Avoid over-engineering or adding extra features
     - Focus on making tests pass, not perfect code
     - **Document implementation decisions** - Explain approach taken to satisfy tests
  3. **REFACTOR Phase:** Clean up code while maintaining green tests
     - Improve code structure, readability, and maintainability
     - Extract functions, remove duplication, improve naming
     - Ensure all tests remain green throughout refactoring
     - **Document improvements made** - Explain what was refactored and why
  4. **ðŸŽ¯ TDD COMPLETION CHECKPOINT** ðŸŽ¯
     - **STOP HERE** and present TDD cycle completion to user
     - **USER CONFIRMATION REQUIRED** before proceeding to completion protocol
     - Show summary: âœ… RED â†’ âœ… GREEN â†’ âœ… REFACTOR phases completed
     - **Provide evidence** of each phase with specific examples of tests, implementation, and refactoring
     - **COLORFUL REMINDER**: ðŸš¨ **IMPORTANT** ðŸš¨ Once user confirms TDD work, proceed to Step 4 (Completion Protocol)
     - **DO NOT SKIP**: The completion protocol in Step 4 is MANDATORY after TDD confirmation

## Task List Maintenance

1. **Update the task list as you work:**
   - Mark tasks and subtasks as completed per Step 4 (Completion Protocol)
   - Add new tasks as they emerge

2. **Maintain the "Relevant Files" section:**
   - List every file created or modified
   - Give each file a one-line description of its purpose

## AI Instructions

When working with task lists, the AI must:

1. **Before starting:** Check which sub-task is next
2. **During development:** Follow MANDATORY TDD cycle:
   - **RED:** Write failing tests first, document what you're testing and why
   - **GREEN:** Write minimal code to make tests pass, document implementation decisions
   - **REFACTOR:** Clean up code while maintaining green tests, document improvements made
3. **During work:** Regularly update the task list file after finishing any significant work
4. **After TDD completion:** Present TDD cycle completion to user and wait for confirmation
5. **Upon user approval:** Proceed to Step 4 (Completion Protocol) for final task completion
6. **File maintenance:** Keep "Relevant Files" section accurate and up to date
7. **New tasks:** Add newly discovered tasks as they emerge

**Mandatory TDD Execution:**

- **Never write implementation before tests** - Tests must be written first and must fail
- **Document each phase thoroughly** - Explain what you're testing, why, and what you implemented
- **Always complete refactor phase** - Clean up code while ensuring tests remain green
- **Stop at TDD checkpoint** - Present completion summary and wait for user confirmation
- **No shortcuts allowed** - Every development task must follow complete RED-GREEN-REFACTOR cycle

**Pause and Confirmation Requirements:**

- **Mandatory pause after TDD** - Cannot proceed to Step 4 without stopping first
- **Present clear summary** - Show âœ… RED â†’ âœ… GREEN â†’ âœ… REFACTOR phases completed
- **Wait for explicit approval** - User must confirm before proceeding to completion protocol
- **Reference Step 4** - Direct user to completion protocol when ready

## Critical Requirements

- **MANDATORY TDD:** Every development task MUST follow RED-GREEN-REFACTOR cycle - no exceptions
- **TDD DOCUMENTATION:** Must document each phase of TDD cycle with evidence of tests-first approach
- **NO TDD SHORTCUTS:** Cannot write implementation before tests, cannot skip refactor phase
- **USER CONFIRMATION:** Must pause after TDD completion and wait for user approval before proceeding to Step 4
- **STEP 4 MANDATORY:** Completion protocol in Step 4 is required after TDD confirmation

## Zero Tolerance Policy for TDD

- **ðŸ”´ TDD violations:** MUST follow RED-GREEN-REFACTOR cycle for ALL development tasks - no exceptions
- **ðŸ”´ Implementation before tests:** Cannot write any implementation code before tests are written and failing
- **ðŸ”´ Skipping refactor:** Cannot skip the refactor phase - code must be cleaned up while maintaining green tests
- **ðŸ”´ Missing documentation:** Each TDD phase must be documented with evidence of proper approach
- **ðŸ”´ No user confirmation:** Cannot proceed to Step 4 without explicit user approval after TDD completion

## Absolute Requirements for Step 3

**TDD COMPLIANCE Requirements:**

1. **RED Phase Evidence Required:** Must demonstrate tests were written FIRST and fail for correct reasons
2. **GREEN Phase Evidence Required:** Must show minimal implementation that makes tests pass
3. **REFACTOR Phase Evidence Required:** Must document code improvements while maintaining green tests
4. **User Pause Mandatory:** MUST stop after TDD completion and wait for user confirmation
5. **No Step 4 Without Approval:** Cannot proceed to completion protocol without user go-ahead

**Documentation Standards:**

- Document what you're testing and why in RED phase
- Document implementation decisions in GREEN phase
- Document improvements made in REFACTOR phase
- Present clear summary of âœ… RED â†’ âœ… GREEN â†’ âœ… REFACTOR completion
