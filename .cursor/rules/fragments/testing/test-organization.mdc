---
description: "Test file organization, naming conventions, and co-located testing approach"
globs:
  - "**/*.test.ts"
  - "**/*.test.tsx"
  - "**/__tests__/**"
---

# Test Organization Patterns

## Co-located Test Structure (Required)

**Use `__tests__` folders for clean separation:**

```text
src/
├── components/
│   ├── ui/
│   │   ├── __tests__/
│   │   │   ├── button.test.tsx
│   │   │   ├── card.test.tsx
│   │   │   └── input.test.tsx
│   │   ├── button.tsx
│   │   ├── card.tsx
│   │   └── input.tsx
│   └── auth/
│       ├── __tests__/
│       │   ├── LoginForm.test.tsx
│       │   └── UserMenu.test.tsx
│       ├── LoginForm.tsx
│       └── UserMenu.tsx
├── hooks/
│   ├── __tests__/
│   │   ├── useAuth.test.ts
│   │   └── useCharacter.test.ts
│   ├── useAuth.ts
│   └── useCharacter.ts
└── lib/
    ├── __tests__/
    │   ├── auth.test.ts
    │   └── utils.test.ts
    ├── auth.ts
    └── utils.ts
```

## Test File Naming (Required)

```typescript
// ✅ Correct - Match source file name with .test extension
// Source: components/ui/button.tsx
// Test: components/ui/__tests__/button.test.tsx

// Source: hooks/useAuth.ts  
// Test: hooks/__tests__/useAuth.test.ts

// ❌ Incorrect - Wrong naming patterns
// Don't use: Button.test.tsx (capitalization mismatch)
// Don't use: button.spec.tsx (use .test not .spec)
// Don't use: test-button.tsx (prefix pattern)
```

**File extensions:**

- React components: `.test.tsx`
- TypeScript utilities: `.test.ts`

## Test Import Patterns

```typescript
// ✅ Correct - Relative imports for source files
// File: components/ui/__tests__/button.test.tsx
import {Button} from '../button';
import {render, screen} from '@testing-library/react';

// File: hooks/__tests__/useAuth.test.ts
import {useAuth} from '../useAuth';
import {renderHook} from '@testing-library/react';
```

## Test Templates

### Component Test

```typescript
// components/ui/__tests__/button.test.tsx
import {render, screen} from '@testing-library/react';
import {describe, it, expect} from 'vitest';
import userEvent from '@testing-library/user-event';

import {Button} from '../button';

describe('Button', () => {
  it('renders button text', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByRole('button', {name: 'Click me'})).toBeInTheDocument();
  });

  it('calls onClick handler when clicked', async () => {
    const user = userEvent.setup();
    const handleClick = vi.fn();
    
    render(<Button onClick={handleClick}>Click me</Button>);
    
    await user.click(screen.getByRole('button'));
    expect(handleClick).toHaveBeenCalledOnce();
  });
});
```

### Hook Test

```typescript
// hooks/__tests__/useAuth.test.ts
import {renderHook, waitFor} from '@testing-library/react';
import {describe, it, expect} from 'vitest';

import {useAuth} from '../useAuth';

describe('useAuth', () => {
  it('returns initial auth state', () => {
    const {result} = renderHook(() => useAuth());
    
    expect(result.current.user).toBeNull();
    expect(result.current.loading).toBe(true);
  });
});
```

## Commands

```bash
yarn test                                    # Run all tests
yarn test src/components/ui/__tests__        # Run component tests
yarn test src/hooks/__tests__/useAuth.test.ts  # Run specific test
```

## Benefits

- **Clean separation** between source and test files
- **Easy discovery** of all tests for a module
- **Reduced clutter** in source directories
- **Clear intent** - tests are obviously tests
- **Batch operations** on tests (delete, move, refactor)

## Best Practices

- **One test file per source file** when possible
- **Match source file names** exactly (case-sensitive)
- **Use relative imports** for source files
- **Create `__tests__` folders** as soon as you add first test
- **Keep folder structure** parallel to source structure
