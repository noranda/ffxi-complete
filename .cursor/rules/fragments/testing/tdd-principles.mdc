---
description: "Test-driven development principles and red-green-refactor cycle for React components"
globs:
  - "src/**/*.{ts,tsx}"
  - "**/*.test.{ts,tsx}"
---

# Test-Driven Development (TDD)

## Red-Green-Refactor Cycle

### 1. Red Phase - Write Failing Test

```typescript
// Write the test first - it should fail
describe('JobProgress', () => {
  it('should display job level', () => {
    render(<JobProgress job="WAR" level={75} />);
    expect(screen.getByText('WAR: 75')).toBeInTheDocument();
  });
});
```

### 2. Green Phase - Minimal Implementation

```typescript
// Write the LEAST code to make the test pass
const JobProgress = ({job, level}: {job: string; level: number}) => {
  return <div>{job}: {level}</div>;
};
```

### 3. Refactor Phase - Clean Up

```typescript
// Only refactor after test passes - improve without changing behavior
const JobProgress = ({job, level}: {job: string; level: number}) => {
  return (
    <div className="job-progress">
      <span className="job-name">{job}</span>
      <span className="job-level">: {level}</span>
    </div>
  );
};
```

## TDD Principles

### Minimal Implementation Rule

- **Write absolute minimum code** to make test pass
- **No premature optimization** - only add what test requires
- **Hardcode values initially** if it gets test passing faster
- **Refactor only after** test is green

### Progressive Enhancement

```typescript
// Start with simplest case
it('should return 0 for same level', () => {
  expect(calculateJobExp(50, 50)).toBe(0);
});

// Minimal implementation
const calculateJobExp = (currentLevel: number, targetLevel: number) => {
  return 0; // Hardcode simplest case first
};

// Add more cases incrementally
it('should handle level 1 to 2', () => {
  expect(calculateJobExp(1, 2)).toBe(100);
});

// Implementation grows with tests
const calculateJobExp = (currentLevel: number, targetLevel: number) => {
  if (currentLevel === targetLevel) return 0;
  if (currentLevel === 1 && targetLevel === 2) return 100;
  return 0;
};
```

## TDD for React Components

```typescript
// 1. Test component's public interface
describe('JobTracker', () => {
  it('should call onJobSelect when job is clicked', () => {
    const mockOnJobSelect = vi.fn();
    render(<JobTracker jobs={['WAR']} onJobSelect={mockOnJobSelect} />);
    
    fireEvent.click(screen.getByText('WAR'));
    expect(mockOnJobSelect).toHaveBeenCalledWith('WAR');
  });
});

// 2. Minimal implementation
const JobTracker = ({jobs, onJobSelect}: {
  jobs: string[];
  onJobSelect: (job: string) => void;
}) => (
  <div>
    {jobs.map(job => (
      <button key={job} onClick={() => onJobSelect(job)}>
        {job}
      </button>
    ))}
  </div>
);
```

## TDD for Hooks

```typescript
// 1. Test hook behavior
describe('useJobProgress', () => {
  it('should update level when setLevel is called', () => {
    const {result} = renderHook(() => useJobProgress('WAR'));
    
    act(() => {
      result.current.setLevel(75);
    });
    
    expect(result.current.level).toBe(75);
  });
});

// 2. Minimal implementation
const useJobProgress = (jobId: string) => {
  const [level, setLevel] = useState(1);
  return {level, setLevel};
};
```

## TDD Workflow

### Daily Process

1. **Write failing test** for next feature/requirement
2. **Write minimal code** to make test pass
3. **Refactor** if needed (only after test is green)
4. **Repeat** for next requirement

### Test Organization

```typescript
// Group related tests logically
describe('JobProgress Component', () => {
  describe('when job level is displayed', () => {
    it('should show current level', () => {
      // Test implementation
    });
  });

  describe('when level is updated', () => {
    it('should call onLevelChange', () => {
      // Test implementation
    });
  });
});
```

## Best Practices

- **Test first, code second** - never write implementation before test
- **One failing test at a time** - focus on single requirement
- **Minimal implementation** - resist urge to over-engineer
- **Refactor with confidence** - tests provide safety net
- **Mock external dependencies** - isolate units under test
- **Use test factories** for consistent test data
