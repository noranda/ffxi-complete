---
description: "Testing strategy, patterns, and coverage requirements for React components and utilities"
globs:
  - "**/*.test.ts"
  - "**/*.test.tsx"
  - "**/vitest.config.ts"
---

# Testing Strategy

## Testing Stack

- **Test Runner**: Vitest with `--run` flag
- **Testing Library**: React Testing Library
- **Environment**: jsdom for DOM simulation
- **Mocking**: Vitest mocks + MSW for API

## Testing Patterns

### Component Testing

```typescript
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';

describe('CharacterSelector', () => {
  it('displays character names', () => {
    render(<CharacterSelector characters={mockCharacters} />);
    expect(screen.getByText('Test Character')).toBeInTheDocument();
  });
});
```

### Hook Testing

```typescript
import { renderHook } from '@testing-library/react';
import { useCharacters } from './useCharacters';

describe('useCharacters', () => {
  it('loads characters on mount', () => {
    const { result } = renderHook(() => useCharacters());
    expect(result.current.loading).toBe(true);
  });
});
```

## Test Organization

**Co-located tests** following project structure:

```text
src/components/CharacterSelector/
  CharacterSelector.tsx
  CharacterSelector.test.tsx
  index.ts
```

## Coverage Standards

- **Utilities**: 95%+ (pure functions)
- **Components**: 80%+ (user interactions)
- **Hooks**: 85%+ (custom logic)
- **Services**: 90%+ (API reliability)

## Best Practices

- **User-centric**: Test what users see/do, not implementation
- **Accessible queries**: Use `getByRole`, `getByLabelText`
- **Mock dependencies**: Supabase, external APIs
- **Use `--run` flag**: Avoid hanging in watch mode
- **Focus on behavior**: User workflows over component methods

## Commands

```bash
yarn test --run                   # Run all tests
yarn test --run --coverage        # Run with coverage
yarn test --run path/to/test.tsx  # Run specific test
```
