---
description: "Component styling patterns using tailwind-variants and design system integration"
globs:
  - "**/*.tsx"
  - "**/*.jsx"
  - "**/tailwind.config.ts"
---

# Styling Patterns

## tailwind-variants Usage (Required)

**Use tailwind-variants for component styling with built-in class merging:**

```typescript
import {tv, type VariantProps} from 'tailwind-variants';

const buttonVariants = tv({
  base: "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none disabled:opacity-50",
  variants: {
    variant: {
      default: "bg-primary text-primary-foreground hover:bg-primary/90",
      destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
      outline: "border border-input bg-background hover:bg-accent",
      secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
      ghost: "hover:bg-accent hover:text-accent-foreground",
    },
    size: {
      default: "h-10 px-4 py-2",
      sm: "h-9 rounded-md px-3",
      lg: "h-11 rounded-md px-8",
      icon: "h-10 w-10",
    },
  },
  defaultVariants: {
    variant: "default",
    size: "default",
  },
});

type ButtonProps = React.ComponentProps<'button'> & 
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  };

// ❌ Don't use class-variance-authority
import {cva} from 'class-variance-authority'; // Avoid this
```

## Component Integration

```typescript
import {cn} from '@/lib/utils';

const Button: React.FC<ButtonProps> = ({
  className,
  size,
  variant,
  ...props
}) => (
  <button
    className={cn(buttonVariants({size, variant}), className)}
    {...props}
  />
);

// ❌ Don't manually concatenate classes
className={`${buttonVariants({variant})} ${className}`} // Avoid this
```

## Variant Structure

**Organize variants logically:**
```typescript
const componentVariants = tv({
  base: "base-classes-here",
  variants: {
    // Visual variants
    variant: {
      default: "default-styling",
      primary: "primary-styling",
      destructive: "destructive-styling",
    },
    // Size variants
    size: {
      sm: "small-sizing",
      md: "medium-sizing", 
      lg: "large-sizing",
    },
    // State variants
    disabled: {
      true: "disabled-styling",
      false: "",
    },
  },
  // Complex interactions
  compoundVariants: [
    {
      variant: "primary",
      size: "lg",
      class: "special-large-primary-styling",
    },
  ],
  defaultVariants: {
    variant: "default",
    size: "md",
  },
});
```

## Design System Integration

**Use consistent naming across components:**
```typescript
// ✅ Consistent variant names
const buttonVariants = tv({
  variants: {
    variant: {
      default: "...",
      primary: "...",
      secondary: "...",
      destructive: "...",
    },
    size: {
      sm: "...",
      md: "...",
      lg: "...",
    },
  },
});

const inputVariants = tv({
  variants: {
    variant: {
      default: "...",
      destructive: "...", // Same naming as button
    },
    size: {
      sm: "...",
      md: "...", // Same naming as button
      lg: "...",
    },
  },
});
```

**Use design system color tokens:**
```typescript
// ✅ Correct - Use design tokens
const alertVariants = tv({
  variants: {
    variant: {
      default: "bg-background text-foreground border-border",
      destructive: "bg-destructive/10 text-destructive border-destructive/20",
      warning: "bg-warning/10 text-warning border-warning/20",
    },
  },
});

// ❌ Incorrect - Hardcoded colors
const alertVariants = tv({
  variants: {
    variant: {
      destructive: "bg-red-50 text-red-900 border-red-200", // Avoid this
    },
  },
});
```

## Best Practices

- **Use tailwind-variants** instead of class-variance-authority
- **Organize variants logically** (visual, size, state)
- **Set default variants** for consistent behavior
- **Use cn() utility** for proper class merging
- **Follow design system** color tokens and naming
- **Use compound variants** for complex style interactions
- **Document variant purposes** with JSDoc comments

## Performance Benefits

- **Built-in tw-merge** functionality
- **Optimized variant calculations** with caching
- **Intelligent class conflict resolution**
- **Minimal bundle size** with tree-shaking
