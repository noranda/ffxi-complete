---
description: 
globs: 
alwaysApply: true
---
# Styling Patterns

## Component Styling with tailwind-variants

Use tailwind-variants for consistent component styling with built-in class merging functionality.

## Component Styling Standards (Required)

### tailwind-variants Usage
```typescript
// ✅ Correct: Use tailwind-variants for component styling
import {tv, type VariantProps} from 'tailwind-variants';

/**
 * Button variants using tailwind-variants
 * Provides consistent styling with built-in tw-merge functionality
 */
const buttonVariants = tv({
  base: "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50",
  variants: {
    variant: {
      default: "bg-primary text-primary-foreground hover:bg-primary/90",
      destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
      outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
      secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
      ghost: "hover:bg-accent hover:text-accent-foreground",
      link: "text-primary underline-offset-4 hover:underline",
    },
    size: {
      default: "h-10 px-4 py-2",
      sm: "h-9 rounded-md px-3",
      lg: "h-11 rounded-md px-8",
      icon: "h-10 w-10",
    },
  },
  defaultVariants: {
    variant: "default",
    size: "default",
  },
});

type ButtonProps = React.ComponentProps<'button'> & 
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  };

// ❌ Incorrect: Using class-variance-authority
import {cva, type VariantProps} from 'class-variance-authority';

const buttonVariants = cva(
  "base-classes",
  {
    variants: {
      // variants
    }
  }
);
```

### Variant Structure

```typescript
// ✅ Correct: Well-organized variant structure
const componentVariants = tv({
  base: "base-classes-here",
  variants: {
    // Visual variants
    variant: {
      default: "default-styling",
      primary: "primary-styling",
      secondary: "secondary-styling",
      destructive: "destructive-styling",
    },
    // Size variants
    size: {
      sm: "small-sizing",
      md: "medium-sizing", 
      lg: "large-sizing",
    },
    // State variants
    disabled: {
      true: "disabled-styling",
      false: "",
    },
  },
  // Compound variants for complex interactions
  compoundVariants: [
    {
      variant: "primary",
      size: "lg",
      class: "special-large-primary-styling",
    },
  ],
  defaultVariants: {
    variant: "default",
    size: "md",
    disabled: false,
  },
});
```

## Integration with Component Props

### Type Integration
```typescript
// ✅ Correct: Proper integration with component props
import {tv, type VariantProps} from 'tailwind-variants';
import {cn} from '@/lib/utils';

const cardVariants = tv({
  base: "rounded-lg border bg-card text-card-foreground shadow-sm",
  variants: {
    padding: {
      none: "",
      sm: "p-4",
      md: "p-6", 
      lg: "p-8",
    },
    elevation: {
      none: "shadow-none",
      sm: "shadow-sm",
      md: "shadow-md",
      lg: "shadow-lg",
    },
  },
  defaultVariants: {
    padding: "md",
    elevation: "sm",
  },
});

type CardProps = React.ComponentProps<'div'> &
  VariantProps<typeof cardVariants> & {
    /** Additional CSS classes */
    className?: string;
  };

const Card: React.FC<CardProps> = ({
  className,
  elevation,
  padding,
  ...props
}) => (
  <div
    className={cn(cardVariants({elevation, padding}), className)}
    {...props}
  />
);
```

## Class Name Utilities

### cn() Utility Usage
```typescript
// ✅ Correct: Use cn() for merging classes
import {cn} from '@/lib/utils';

const Component: React.FC<ComponentProps> = ({className, variant, ...props}) => (
  <div
    className={cn(
      componentVariants({variant}),
      className
    )}
    {...props}
  />
);

// ❌ Incorrect: Manual class concatenation
const Component: React.FC<ComponentProps> = ({className, variant, ...props}) => (
  <div
    className={`${componentVariants({variant})} ${className}`}
    {...props}
  />
);
```

## Design System Integration

### Consistent Naming
```typescript
// ✅ Correct: Consistent variant naming across components
const buttonVariants = tv({
  variants: {
    variant: {
      default: "...",
      primary: "...",
      secondary: "...",
      destructive: "...",
      ghost: "...",
      link: "...",
    },
    size: {
      sm: "...",
      md: "...", // or "default"
      lg: "...",
      icon: "...",
    },
  },
});

const inputVariants = tv({
  variants: {
    variant: {
      default: "...",
      destructive: "...", // Same naming as button
    },
    size: {
      sm: "...",
      md: "...", // Same naming as button
      lg: "...",
    },
  },
});
```

### Color Token Usage
```typescript
// ✅ Correct: Use design system color tokens
const alertVariants = tv({
  base: "rounded-lg border p-4",
  variants: {
    variant: {
      default: "bg-background text-foreground border-border",
      destructive: "bg-destructive/10 text-destructive border-destructive/20",
      warning: "bg-warning/10 text-warning border-warning/20",
      success: "bg-success/10 text-success border-success/20",
    },
  },
});

// ❌ Incorrect: Hardcoded colors
const alertVariants = tv({
  variants: {
    variant: {
      destructive: "bg-red-50 text-red-900 border-red-200",
    },
  },
});
```

## Best Practices

- **Use tailwind-variants** instead of class-variance-authority
- **Organize variants logically** (visual, size, state)
- **Use compound variants** for complex style interactions
- **Set default variants** for consistent behavior
- **Integrate with TypeScript** using VariantProps
- **Use cn() utility** for proper class merging
- **Follow design system** color tokens and naming conventions
- **Document variant purposes** with JSDoc comments

## Performance Considerations

- **tailwind-variants includes tw-merge** functionality automatically
- **Variant calculations** are optimized and cached
- **Class merging** handles conflicts intelligently
- **Bundle size** is minimal with tree-shaking
