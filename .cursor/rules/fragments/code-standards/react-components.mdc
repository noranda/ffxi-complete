---
description: "React component patterns, prop sorting, and JSX formatting standards"
globs:
  - "**/*.tsx"
  - "**/*.jsx"
---

# React Component Standards

## Component Declaration (Required)

**Always use React.FC with const arrow function**:
```typescript
// ✅ Correct
type JobTrackerProps = {
  characterId: string;
  className?: string;
  onProgressUpdate: (jobId: string, level: number) => void;
};

const JobTracker: React.FC<JobTrackerProps> = ({
  characterId,
  className,
  onProgressUpdate,
}) => {
  return (
    <div className={className}>
      {/* Implementation */}
    </div>
  );
};

// ❌ Incorrect - function declaration
function JobTracker(props: JobTrackerProps) { ... }
```

## Implicit vs Explicit Return

**Use implicit return for JSX-only components**:
```typescript
// ✅ Correct - implicit return
const CardFooter: React.FC<CardFooterProps> = ({className, ...props}) => (
  <div
    className={cn('flex items-center px-6', className)}
    {...props}
  />
);

// ✅ Correct - explicit return when logic present
const ComplexComponent: React.FC<ComplexProps> = ({data, isLoading}) => {
  if (isLoading) return <LoadingSpinner />;
  
  const processedData = data.map(item => ({...item, processed: true}));
  
  return (
    <div>
      {processedData.map(item => (
        <div key={item.id}>{item.name}</div>
      ))}
    </div>
  );
};
```

## Prop Sorting (Required)

**All props must be sorted alphabetically**:

**Component parameters**:
```typescript
// ✅ Correct
const RegisterForm: React.FC<RegisterFormProps> = ({
  className,
  onSuccess,
  onSwitchToLogin,
}) => { ... };

// ❌ Incorrect - not alphabetical
const RegisterForm: React.FC<RegisterFormProps> = ({
  onSuccess,
  onSwitchToLogin,
  className,
}) => { ... };
```

**JSX attributes**:
```typescript
// ✅ Correct
<button
  className="btn-primary"
  data-testid="submit-button"
  disabled={false}
  onClick={handleClick}
  type="submit"
>
  Submit
</button>

// ❌ Incorrect - not alphabetical
<button
  onClick={handleClick}
  type="submit"
  disabled={false}
  className="btn-primary"
>
  Submit
</button>
```

## JSX Formatting

**Element spacing**:
- No newlines between consecutive single-line elements
- Add newlines before/after multi-line elements
- Group single-line elements together

```typescript
// ✅ Correct
const UserProfile: React.FC<UserProfileProps> = ({name, role}) => (
  <div className="profile">
    <h2 className="name">{name}</h2>
    <div className="role">{role}</div>

    <div className="actions">
      <button>Edit</button>
    </div>
  </div>
);
```

## Best Practices

- Always use React.FC with const arrow function
- Sort all props alphabetically (parameters, types, JSX attributes)
- Use implicit return for JSX-only components
- Use explicit return when component has logic
- Prefer `<div>` over `<p>` for text content
