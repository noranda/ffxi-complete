--
description: "Shared component type patterns for promoting reusability and consistency across related components"
globs:
  - "**/types.ts"
  - "**/*.tsx"
  - "**/*.jsx"
---

# Shared Component Types Pattern

## When to Create Shared Types Files

**Create `types.ts` in component folders when:**
- Multiple components share similar type patterns
- Common data structures are used across components
- Standardized interfaces would improve consistency
- Type reusability would reduce code duplication

### Component Folders That Should Have Shared Types
```
src/components/
├── auth/
│   ├── types.ts           ✅ Auth form types, callbacks, validation
│   ├── LoginForm.tsx
│   └── RegisterForm.tsx
├── character/
│   ├── types.ts           ✅ Character data types, form props
│   ├── CharacterForm.tsx
│   └── CharacterSelector.tsx
├── collections/
│   ├── types.ts           ✅ Progress types, collection items
│   ├── CollectionTab.tsx
│   └── ProgressIndicator.tsx
└── ui/
    ├── button.tsx         ❌ Single-purpose components, no shared types
    └── input.tsx
```

## Shared Types Structure

**Organize by category:**
```typescript
// src/components/auth/types.ts

// 1. Form Data Types
export type LoginFormData = {
  email: string;
  password: string;
  rememberMe?: boolean;
};

export type RegisterFormData = {
  confirmPassword: string;
  email: string;
  password: string;
};

// 2. Common Error Types
export type FormErrors = {
  confirmPassword?: string;
  email?: string;
  general?: string;
  password?: string;
};

// 3. Callback Function Types
export type AuthCallbacks = {
  onCancel?: () => void;
  onSuccess?: () => void;
  onSwitchToLogin?: () => void;
  onSwitchToRegister?: () => void;
};

// 4. Base Props Types
export type BaseAuthFormProps = {
  className?: string;
  disabled?: boolean;
  loading?: boolean;
};

// 5. Domain-Specific Types
export type OAuthProvider = 'discord' | 'google' | 'apple';
```

## Component Integration

**Using shared types in components:**
```typescript
// ✅ Correct - Import and extend shared types
import type {AuthCallbacks, BaseAuthFormProps, FormErrors} from './types';

type LoginFormProps = BaseAuthFormProps & 
  Pick<AuthCallbacks, 'onSuccess' | 'onSwitchToRegister'>;

const LoginForm: React.FC<LoginFormProps> = ({className, onSuccess}) => {
  const [errors, setErrors] = useState<FormErrors>({});
  // Component implementation
};
```

**Type composition patterns:**
```typescript
// ✅ Use intersection (&) for combining multiple type sources
type ComponentProps = BaseProps & SpecificCallbacks & {
  additionalProp: string;
};

// ✅ Use Pick utility for selecting specific properties
type ComponentProps = BaseAuthFormProps & 
  Pick<AuthCallbacks, 'onSuccess' | 'onCancel'>;

// ✅ Use Omit to exclude properties
type ComponentProps = Omit<BaseFormProps, 'onSubmit'> & {
  onCustomSubmit: () => void;
};
```

## Index File Export Pattern

**Export shared types from component index:**
```typescript
// src/components/auth/index.ts
export {LoginForm} from './LoginForm';
export {RegisterForm} from './RegisterForm';

// Export shared types for external use
export type {
  AuthCallbacks,
  BaseAuthFormProps,
  FormErrors,
  LoginFormData,
  OAuthProvider,
  RegisterFormData,
} from './types';
```

**Usage from external components:**
```typescript
// ✅ Import shared types from component folder
import type {FormErrors, AuthCallbacks} from '@/components/auth';

const ExternalComponent: React.FC<{onAuth: AuthCallbacks['onSuccess']}> = ({onAuth}) => {
  const [errors, setErrors] = useState<FormErrors>({});
  // Implementation
};
```

## Type Documentation

**JSDoc for shared types:**
```typescript
/**
 * Common form validation errors structure
 * Used across login, register, password reset forms
 */
export type FormErrors = {
  /** Password confirmation error message */
  confirmPassword?: string;
  /** Email validation error message */
  email?: string;
  /** General form error message */
  general?: string;
  /** Password validation error message */
  password?: string;
};

/**
 * Authentication callback function types
 * Standardized callbacks for auth component interactions
 */
export type AuthCallbacks = {
  /** Callback when authentication is successful */
  onSuccess?: () => void;
  /** Callback when user wants to switch to login */
  onSwitchToLogin?: () => void;
};
```

## Benefits

- **Consistency**: Standardized patterns across related components
- **Reusability**: Reduce code duplication and type redundancy
- **Maintainability**: Central location for type updates
- **Type Safety**: Shared types ensure consistency across components
- **Discoverability**: Clear location for component-related types

## Best Practices

### Type Organization
- **Group related types** by functionality or usage pattern
- **Use descriptive names** that indicate purpose and scope
- **Document complex types** with JSDoc comments
- **Export types alphabetically** from index files

### Type Design
- **Keep types focused** - one responsibility per type
- **Sort properties alphabetically** - maintain consistent order
- **Use composition** - build complex types from simple ones
- **Leverage TypeScript utilities** - Pick, Omit, Partial, etc.

### Naming Conventions
- **Suffix with purpose**: `FormData`, `Props`, `State`, `Callbacks`
- **Use domain prefixes**: `Auth`, `Character`, `Collection` when needed
- **Be specific**: `RegisterFormData` vs generic `FormData`
- **Stay consistent**: Use same patterns across all component folders

## Migration Strategy

**Adding shared types to existing components:**
1. Identify common patterns in existing component types
2. Create `types.ts` with shared type definitions
3. Update components to import and use shared types
4. Remove duplicate type definitions from individual components
5. Update index exports to include new shared types
