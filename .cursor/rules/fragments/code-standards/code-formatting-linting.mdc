---
description: "Code formatting, linting rules, and JSX formatting standards"
globs:
  - "**/*.ts"
  - "**/*.tsx"
  - "eslint.config.js"
  - "prettier.config.js"
---

# Code Formatting & Linting

## ESLint Configuration

**Modern flat config with key rules:**
```javascript
export default tseslint.config({
  extends: [js.configs.recommended, ...tseslint.configs.recommended],
  rules: {
    'prefer-const': 'error',
    'no-var': 'error',
    '@typescript-eslint/no-unused-vars': 'error',
    '@typescript-eslint/prefer-nullish-coalescing': 'error',
    'simple-import-sort/imports': 'error',
    'simple-import-sort/exports': 'error',
  }
});
```

## Prettier Configuration

```json
{
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "es5",
  "printWidth": 80,
  "bracketSpacing": false,
  "arrowParens": "avoid"
}
```

## JSX Formatting Rules (Critical - Manual Verification)

**Newlines around multi-line JSX elements** (ESLint cannot check):

```typescript
// ✅ Correct - newlines around multi-line elements
<div className="form-field">
  <label htmlFor="email">Email</label>

  <Input
    aria-invalid={hasError}
    disabled={isSubmitting}
    id="email"
    placeholder="your.email@example.com"
    type="email"
  />

  {hasError && (
    <div className="error-message">
      {errorMessage}
    </div>
  )}
</div>

// ❌ Incorrect - missing newlines
<div className="form-field">
  <label htmlFor="email">Email</label>
  <Input
    aria-invalid={hasError}
    disabled={isSubmitting}
    id="email"
    placeholder="your.email@example.com"
    type="email"
  />
  {hasError && (
    <div className="error-message">
      {errorMessage}
    </div>
  )}
</div>
```

**Single-line elements can be grouped:**
```typescript
// ✅ Correct - single-line elements grouped
<div className="status">
  <span className="icon">{icon}</span>
  <span className="text">{message}</span>
  <span className="time">{time}</span>
</div>
```

## Component Format

```typescript
// ✅ Correct - React.FC, props sorted, proper spacing
type JobProgressProps = {
  experience: number;
  job: string;
  level: number;
  onUpdate: (job: string, level: number) => void;
};

const JobProgress: React.FC<JobProgressProps> = ({
  experience,
  job,
  level,
  onUpdate,
}) => {
  return (
    <div className="job-progress">
      <h3>{job}</h3>
      <span>Level: {level}</span>

      <button onClick={() => onUpdate(job, level + 1)}>
        Level Up
      </button>
    </div>
  );
};
```

## Key Standards

- **No bracket spacing**: `{data, error}` not `{ data, error }`
- **Single quotes** for strings
- **Alphabetical prop sorting** in JSX and component parameters
- **Prefer `<div>` over `<p>`** for text content
- **Manual JSX newline verification** required (ESLint can't check)
- **Semicolons** after statements
- **Trailing commas** in multiline structures

## Commands

```bash
yarn lint           # ESLint check
yarn lint --fix     # Auto-fix ESLint issues
yarn prettier --check .  # Format check
yarn prettier --write .  # Auto-format files
```
