---
description: "Function and component documentation standards, inline commenting, and documentation maintenance"
globs:
  - "**/*.ts"
  - "**/*.tsx"
  - "**/*.js"
  - "**/*.jsx"
---

# Code Documentation Standards

## Automated Patterns

The following are **fully automated** by ESLint:

- ✅ JSDoc comment presence on all exported functions, components, and methods
- ✅ Comment block formatting and consistency
- ✅ Example code formatting following project linting standards

## JSDoc Standards - Minimal Approach

**We use minimal JSDoc comments** focused on concise descriptions only:

### Required

- ✅ **Description only** - Clear, concise explanation of what the function/component does
- ✅ **JSDoc block presence** - All exported functions and components must have JSDoc

### Explicitly Disabled (Enforced by ESLint)

- ❌ **No @param tags** - TypeScript provides parameter information
- ❌ **No @returns tags** - TypeScript provides return type information  
- ❌ **No @example tags** - Keep documentation lightweight
- ❌ **No @arg/@argument/@throws/@yields tags** - Not needed in minimal approach
- ❌ **No parameter descriptions** - Rely on TypeScript types and meaningful names

**ESLint Enforcement**: The `jsdoc/no-restricted-syntax` rule actively prevents usage of unwanted JSDoc tags
with clear error messages, ensuring our minimal approach is automatically enforced.

### Example Format

```typescript
/**
 * Route guard component that ensures only authenticated users can access protected content.
 */
export const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ ... }) => {
  // Implementation
};

/**
 * Validates user input and sanitizes special characters for database storage.
 */
export const validateInput = (input: string): ValidationResult => {
  // Implementation  
};
```

## Function Documentation Requirements

**All functions must have concise descriptions** explaining their purpose:

- What the function does
- When it should be used
- Any important behavior or side effects

**Focus on practical value** over restating obvious information:

- ✅ "Validates user input and sanitizes special characters"
- ❌ "Function that takes input parameter and returns output"

## Complex Logic Commenting

**Complex business logic must have inline comments throughout** to aid future understanding:

### Algorithm Explanations

```typescript
const calculateShippingCost = (weight: number, distance: number) => {
  // Base rate calculation using industry standard zones
  const baseRate = weight * 0.5;
  
  // Distance multiplier: >100 miles gets freight rates
  const distanceMultiplier = distance > 100 ? 1.8 : 1.2;
  
  // Apply fuel surcharge (updated quarterly)
  const fuelSurcharge = baseRate * 0.15;
  
  return (baseRate * distanceMultiplier) + fuelSurcharge;
};
```

### Non-obvious Conditional Logic

```typescript
const shouldShowAdvancedFeatures = (user: User) => {
  // Premium users or beta testers get advanced features
  // Beta program expires after 90 days of inactivity
  return user.subscription === 'premium' || 
         (user.betaTester && user.lastActivity > thirtyDaysAgo);
};
```

### Complex State Transformations

```typescript
const mergeUserPreferences = (current: Preferences, updates: Partial<Preferences>) => {
  // Deep merge required for nested theme settings
  // Preserve user customizations even when defaults change
  const merged = {
    ...current,
    ...updates,
    theme: {
      ...current.theme,
      ...updates.theme,
      // Always preserve user's custom color if set
      customColors: updates.theme?.customColors || current.theme?.customColors,
    },
  };
  
  return merged;
};
```

## ESLint Disable Guidelines

**ESLint comment disables should only be used in special cases:**

### Acceptable Use Cases

- External library integration requiring non-standard patterns
- Generated code or third-party imports
- Temporary workarounds with TODO comments and tracking issues
- Performance-critical code where rules conflict with optimization

### Required Format for Disables

```typescript
// eslint-disable-next-line jsdoc/require-jsdoc -- Generated function from API schema
const generatedHandler = createApiHandler();

// eslint-disable-next-line jsdoc/require-jsdoc -- TODO: Refactor legacy code (Issue #123)
function legacyUtilFunction() {
  // Complex legacy logic here...
}
```

### Unacceptable Use Cases

- Avoiding documentation requirements on business logic
- "Temporary" fixes that become permanent
- Personal preference over established patterns
- Bulk disabling without specific justification

## Section Organization Comments

**Use section comments** to organize complex files:

```typescript
// ============================================================
// State Management
// ============================================================
const [loading, setLoading] = useState(false);
const [error, setError] = useState<string | null>(null);

// ============================================================
// Data Fetching
// ============================================================
const fetchUserData = useCallback(async () => {
  // Implementation...
}, []);

// ============================================================
// Event Handlers  
// ============================================================
const handleSubmit = useCallback(() => {
  // Implementation...
}, []);

// ============================================================
// Render Logic
// ============================================================
return (
  <div>
    {/* Component JSX */}
  </div>
);
```

## Documentation Maintenance

### Keep Comments Synchronized

**Mandatory comment review on code changes:**

- **Every code modification requires comment review** - When updating any function, method, or complex logic,
  actively review all related comments for accuracy
- **Update outdated descriptions** - If function behavior, parameters, or return values change, update JSDoc comments immediately
- **Remove stale inline comments** - Delete comments that no longer apply to the current implementation
- **Add new comments for added complexity** - If refactoring introduces new complex logic, add appropriate inline comments
- **Validate examples in JSDoc** - Ensure code examples in documentation still work with the updated implementation

### Document Assumptions and Constraints

**Include important context:**

- External API limitations
- Browser compatibility requirements  
- Performance considerations
- Security implications
- Business rules and domain knowledge

### Comment Review Checklist

**During code reviews, verify:**

- JSDoc descriptions accurately reflect function behavior
- Inline comments explain non-obvious logic
- Examples in documentation are current and correct
- Complex algorithms have sufficient explanation
- Assumptions and constraints are documented
- ESLint disables have proper justification
