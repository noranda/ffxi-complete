---
description: "JSDoc documentation standards and inline comment patterns for components and functions"
globs:
  - "**/*.ts"
  - "**/*.tsx"
---

# Code Documentation Standards

## JSDoc Requirements (Required)

**All exported functions, components, and types must have JSDoc comments:**

### Component Documentation
```typescript
/**
 * Button props extending HTML element attributes
 */
type ButtonProps = React.ComponentProps<'button'> & {
  /** Render as child using composition pattern */
  asChild?: boolean;
  /** Button size variant */
  size?: 'sm' | 'md' | 'lg';
  /** Button visual style variant */
  variant?: 'primary' | 'secondary' | 'destructive';
};

/**
 * Versatile button component with multiple styling variants
 * Built on HTML button with design system integration
 * 
 * @example
 * ```tsx
 * <Button onClick={handleClick} size="lg" variant="primary">
 *   Save Changes
 * </Button>
 * 
 * <Button asChild>
 *   <Link to="/dashboard">Go to Dashboard</Link>
 * </Button>
 * ```
 */
const Button: React.FC<ButtonProps> = ({
  asChild = false,
  children,
  className,
  size = 'md',
  variant = 'primary',
  ...props
}) => {
  // Implementation
};
```

### Type Documentation
```typescript
/**
 * User preference configuration object
 * Handles application-wide user settings and personalization
 */
type UserPreferences = {
  /** User's preferred theme setting */
  theme: 'light' | 'dark' | 'system';
  /** Whether to show completion notifications */
  notifications: boolean;
  /** Default character to load on login */
  defaultCharacterId?: string;
};

/**
 * API response wrapper for consistent error handling
 * Used across all API endpoints for standardized responses
 */
type ApiResponse<T> = {
  /** Response data if successful */
  data: T;
  /** Error message if request failed */
  error: string | null;
  /** Whether the request was successful */
  success: boolean;
};
```

### Hook Documentation
```typescript
/**
 * Custom hook for managing user preferences
 * Handles persistence to localStorage and provides reactive updates
 * 
 * @returns Object with current preferences and update function
 * 
 * @example
 * ```tsx
 * const {preferences, updatePreference} = useUserPreferences();
 * 
 * const handleThemeChange = (theme: Theme) => {
 *   updatePreference('theme', theme);
 * };
 * ```
 */
const useUserPreferences = (): UserPreferencesReturn => {
  // Implementation
};
```

## JSDoc Example Code Standards (Critical)

**All JSDoc example code MUST follow the same standards as implementation code:**

```typescript
// ✅ Correct - Props alphabetically sorted, follows code standards
/**
 * @example
 * ```tsx
 * <Button onClick={() => save()} size="lg" variant="primary">
 *   Save Changes
 * </Button>
 * ```
 */

// ❌ Incorrect - Props not alphabetically sorted
/**
 * @example
 * ```tsx
 * <Button variant="primary" onClick={() => save()} size="lg">
 *   Save Changes
 * </Button>
 * ```
 */
```

## Inline Comments

**Use section comments for complex components:**
```typescript
const ComplexDashboard: React.FC<DashboardProps> = ({userId}) => {
  // State management section
  const [activeTab, setActiveTab] = useState<TabType>('overview');
  
  // Data fetching section
  const {data: userData} = useQuery({
    queryKey: ['user', userId],
    queryFn: () => fetchUserData(userId),
  });

  // Event handlers section
  const handleTabChange = useCallback((tab: TabType) => {
    // Validate tab before switching
    if (isValidTab(tab)) {
      setActiveTab(tab);
    }
  }, []);

  // Render logic
  return (
    <div className="dashboard">
      {/* Header section */}
      <DashboardHeader user={userData} />
      
      {/* Main content section */}
      <div className="dashboard-content">
        {activeTab === 'overview' && <OverviewTab data={userData} />}
      </div>
    </div>
  );
};
```

## JSDoc Tags

**Common JSDoc tags to use:**
```typescript
/**
 * Description of the function/component/type
 * 
 * @param paramName - Description of parameter
 * @returns Description of return value
 * @throws Description of when errors are thrown
 * @example
 * ```tsx
 * // Usage example here
 * ```
 * 
 * @see RelatedComponent - Links to related functionality
 * @since v1.2.0 - When this was added
 * @deprecated Use NewComponent instead
 */
```

## Requirements

- **All exported items** must have JSDoc comments
- **Examples must be practical** and copy-pasteable
- **Complex logic** must have inline comments
- **Example code must follow** all code standards
- **Keep comments current** - update when implementation changes

## Best Practices

- **Write documentation first** when designing new APIs
- **Use concrete examples** that developers can copy
- **Explain the "why"** not just the "what"
- **Use section comments** to break down complex components
- **Document edge cases** and special behavior
