---
description: "TypeScript coding standards and patterns for type definitions and property organization"
globs:
  - "**/*.ts"
  - "**/*.tsx"
---

# TypeScript Standards

## Type Definitions

**Prefer types over interfaces** for object shapes:
```typescript
// ✅ Correct
type Character = {
  createdAt: Date;
  id: string;
  name: string;
  userId: string;
};

// ❌ Avoid interfaces for simple objects
interface Character { ... }
```

**Use enums for fixed sets**:
```typescript
enum JobType {
  BLM = 'BLM',
  MNK = 'MNK',
  WAR = 'WAR',
  WHM = 'WHM',
}
```

**Union types for flexibility**:
```typescript
type ProgressStatus = 'completed' | 'in_progress' | 'not_started';
type Theme = 'dark' | 'light' | 'system';
```

## Property Sorting (Required)

**All properties must be sorted alphabetically**:
```typescript
// ✅ Correct
type FormErrors = {
  confirmPassword?: string;
  email?: string;
  general?: string;
  password?: string;
};

// ❌ Incorrect - not alphabetical
type FormErrors = {
  email?: string;
  password?: string;
  confirmPassword?: string;
  general?: string;
};
```

## Utility Types

```typescript
type ApiResponse<T> = {
  data: T;
  error: string | null;
  success: boolean;
};

// Use built-in utility types
type PartialCharacter = Partial<Character>;
type RequiredId = Pick<Character, 'id'>;
type CharacterUpdate = Omit<Character, 'createdAt' | 'id'>;
```

## Best Practices

- Use strict TypeScript configuration
- Sort all properties alphabetically
- Prefer `type` over `interface` for object shapes
- Use utility types for transformations
- Define types outside component definitions
