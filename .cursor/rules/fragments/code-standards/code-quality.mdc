---
description: "Error handling patterns, testing considerations, performance guidelines, and code review standards"
globs:
  - "**/*.ts"
  - "**/*.tsx"
  - "**/*.js"
  - "**/*.jsx"
---

# Code Quality Standards

## Automated Quality Checks

The following are **fully automated** by ESLint and require no manual verification:

- ✅ Error objects for throws and Promise rejections
- ✅ Awaiting promises and proper async patterns
- ✅ Promise misuse in conditionals
- ✅ Testing file structure and naming conventions
- ✅ Performance anti-patterns (unnecessary re-renders, memory leaks)

## Error Handling Patterns

### Error Boundaries

**Place React Error Boundaries at appropriate component tree levels:**

- Feature-level boundaries for isolated error handling
- Page-level boundaries for graceful fallbacks
- Global boundary for catastrophic errors

```typescript
const FeatureErrorBoundary: React.FC<{children: React.ReactNode}> = ({children}) => {
  return (
    <ErrorBoundary fallback={<FeatureErrorFallback />}>
      {children}
    </ErrorBoundary>
  );
};
```

### User-Friendly Error Messages

**Map technical errors to actionable user messages:**

- Use error codes/types for consistent mapping
- Provide clear next steps for resolution
- Include helpful context without exposing sensitive details

```typescript
const getErrorMessage = (error: ApiError): string => {
  switch (error.code) {
    case 'NETWORK_ERROR':
      return 'Connection lost. Please check your internet and try again.';
    case 'VALIDATION_ERROR':
      return 'Please check the highlighted fields and try again.';
    case 'AUTH_EXPIRED':
      return 'Your session has expired. Please log in again.';
    default:
      return 'Something went wrong. Please try again or contact support.';
  }
};
```

### Retry Logic

**Implement appropriate retry strategies:**

- Exponential backoff for network requests
- Retry limits to prevent infinite loops
- Circuit breaker patterns for upstream failures

```typescript
const retryWithBackoff = async <T>(
  operation: () => Promise<T>,
  maxRetries: number = 3
): Promise<T> => {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      if (attempt === maxRetries) throw error;
      // Exponential backoff: 1s, 2s, 4s, etc.
      await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt - 1)));
    }
  }
  throw new Error('Max retries exceeded');
};
```

### Error State Management

**Design error states that guide users toward resolution:**

- Show specific validation errors inline
- Provide clear actions to resolve errors
- Maintain form state during error recovery
- Include loading states during error recovery attempts

## Testing Considerations

### Test Coverage Requirements

**Ensure comprehensive coverage of critical paths:**

- All exported functions must have unit tests
- Component rendering and interaction testing
- Error state testing for all error boundaries
- Edge cases and boundary conditions

### Test Organization

**Co-locate tests with source code:**

- Place tests in `__tests__/` folders next to components
- Use descriptive test file names matching source files
- Group related tests in test suites with clear descriptions

### Test Quality Standards

**Write maintainable and reliable tests:**

- Use descriptive test names that explain behavior
- Test behavior, not implementation details
- Mock external dependencies appropriately
- Keep tests focused and independent

## Performance Guidelines

### React Performance

**Optimize rendering performance:**

- Use React.memo for expensive pure components
- Implement useMemo and useCallback for expensive calculations
- Avoid creating objects/functions in render methods
- Minimize prop drilling with context or state management

### Data Fetching Performance

**Optimize data operations:**

- Implement request deduplication for repeated calls
- Use proper loading states to prevent race conditions
- Cache frequently accessed data appropriately
- Implement proper error retry logic

### Bundle Performance

**Keep bundle sizes manageable:**

- Use dynamic imports for code splitting
- Analyze bundle composition regularly
- Remove unused dependencies and dead code
- Optimize asset loading (images, fonts, etc.)

## Code Review Standards

### Review Checklist

**Mandatory verification during code reviews:**

**Functionality:**

- Code solves the intended problem correctly
- Edge cases and error scenarios are handled
- Performance implications are considered
- Security implications are evaluated

**Code Quality:**

- Code follows established patterns and conventions
- Functions are appropriately sized and focused
- Complex logic is well-documented
- Tests cover new functionality adequately

**Maintainability:**

- Code is readable and self-documenting
- Dependencies are justified and minimal
- Configuration is externalized appropriately
- Breaking changes are documented

### Review Process

**Structured approach to code reviews:**

- Review smaller, focused pull requests
- Provide constructive feedback with examples
- Suggest improvements rather than just pointing out problems
- Verify all automated checks pass before review
- Test functionality locally when appropriate

### Quality Gates

**Requirements before merging:**

- All automated tests pass
- Code coverage meets minimum thresholds
- No linting errors or warnings
- Security scan passes (if applicable)
- Performance impact is acceptable
- Documentation is updated as needed

## Monitoring and Observability

### Error Tracking

**Implement comprehensive error monitoring:**

- Log errors with sufficient context for debugging
- Track error rates and patterns over time
- Set up alerts for critical error thresholds
- Include user actions leading to errors

### Performance Monitoring

**Track application performance:**

- Monitor Core Web Vitals and user experience metrics
- Track API response times and error rates
- Monitor bundle sizes and loading performance
- Set up alerts for performance degradation

### User Experience Monitoring

**Track user behavior and satisfaction:**

- Monitor user flows and conversion rates
- Track feature usage and adoption
- Collect user feedback on error experiences
- Monitor accessibility compliance
