---
description: "Supabase-specific patterns, best practices, and common solutions"
globs:
  - "**/*.ts"
  - "**/*.tsx"
  - "supabase/**"
---

# Supabase Patterns & Best Practices

## Project Setup Patterns

### Environment Configuration
```typescript
// supabaseClient.ts - Central client configuration
import {createClient} from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);
```

### Database Types Generation
```bash
# Generate TypeScript types from your database schema
supabase gen types typescript --linked > src/types/database.types.ts
```

## Authentication Patterns

### Auth Context Pattern
```typescript
// AuthContext.tsx - Centralized auth state management
type AuthContextType = {
  user: User | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signOut: () => Promise<void>;
};
```

### Protected Route Pattern
```typescript
// ProtectedRoute.tsx - Route guards for authenticated users
const ProtectedRoute = ({children}: {children: React.ReactNode}) => {
  const {user, loading} = useAuth();
  
  if (loading) return <LoadingSpinner />;
  if (!user) return <Navigate to="/login" replace />;
  
  return <>{children}</>;
};
```

## Database Schema Patterns

### User-Owned Data Pattern
```sql
-- Core pattern: All user data references auth.users
CREATE TABLE characters (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

### Progress Tracking Pattern
```sql
-- Pattern: Composite keys for progress tracking
CREATE TABLE job_progress (
  character_id UUID REFERENCES characters(id) ON DELETE CASCADE,
  job_type TEXT NOT NULL,
  level INTEGER NOT NULL DEFAULT 1,
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  PRIMARY KEY (character_id, job_type)
);
```

## Row Level Security (RLS) Patterns

### User Data Isolation
```sql
-- Enable RLS
ALTER TABLE characters ENABLE ROW LEVEL SECURITY;

-- Policy: Users can only access their own characters
CREATE POLICY "users_own_characters" ON characters
  FOR ALL USING (auth.uid() = user_id);
```

### Cascading Security
```sql
-- Policy: Users can access progress for their own characters
CREATE POLICY "users_own_progress" ON job_progress
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM characters 
      WHERE characters.id = job_progress.character_id 
      AND characters.user_id = auth.uid()
    )
  );
```

## Query Patterns

### Service Layer Pattern
```typescript
// Service pattern for database operations
export const characterService = {
  async create(character: Omit<Character, 'id' | 'created_at'>) {
    const {data, error} = await supabase
      .from('characters')
      .insert(character)
      .select()
      .single();
    
    if (error) throw new Error(`Failed to create character: ${error.message}`);
    return data;
  },

  async getByUserId(userId: string) {
    const { data, error } = await supabase
      .from('characters')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });
    
    if (error) throw new Error(`Failed to fetch characters: ${error.message}`);
    return data;
  }
};
```

### Upsert Pattern for Progress
```typescript
// Progress update with conflict resolution
export const progressService = {
  async updateJobLevel(characterId: string, jobType: string, level: number) {
    const { data, error } = await supabase
      .from('job_progress')
      .upsert({
        character_id: characterId,
        job_type: jobType,
        level,
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'character_id,job_type'
      })
      .select()
      .single();
    
    if (error) throw new Error(`Failed to update job progress: ${error.message}`);
    return data;
  }
};
```

## Real-time Patterns

### Subscription Management
```typescript
// useRealtimeSubscription hook
export const useRealtimeSubscription = <T>(
  table: string,
  filter?: string,
  callback?: (payload: any) => void
) => {
  useEffect(() => {
    const subscription = supabase
      .channel(`${table}_changes`)
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table,
        filter 
      }, callback)
      .subscribe();

    return () => subscription.unsubscribe();
  }, [table, filter]);
};
```

## Error Handling Patterns

### Service Layer Error Handling
```typescript
// Consistent error handling across services
export class DatabaseError extends Error {
  constructor(
    message: string,
    public operation: string,
    public table: string,
    public originalError?: any
  ) {
    super(message);
    this.name = 'DatabaseError';
  }
}

export const handleDatabaseError = (
  error: any,
  operation: string,
  table: string
): never => {
  throw new DatabaseError(
    `Failed to ${operation} ${table}: ${error.message}`,
    operation,
    table,
    error
  );
};
```

### React Query Integration
```typescript
// Using React Query with Supabase
export const useCharacters = () => {
  return useQuery({
    queryKey: ['characters'],
    queryFn: () => characterService.getByUserId(user.id),
    enabled: !!user,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
};

export const useUpdateCharacter = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ id, updates }: { id: string; updates: Partial<Character> }) =>
      characterService.update(id, updates),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['characters'] });
    },
  });
};
```

## Performance Patterns

### Optimized Queries
```typescript
// Select only needed columns
const { data: characters } = await supabase
  .from('characters')
  .select('id, name, server') // Only select what you need
  .eq('user_id', userId);

// Use joins instead of multiple queries
const { data: charactersWithProgress } = await supabase
  .from('characters')
  .select(`
    id,
    name,
    server,
    job_progress(job_type, level)
  `)
  .eq('user_id', userId);
```

## Security Best Practices

### Input Validation
```typescript
// Always validate inputs before database operations
import { z } from 'zod';

const CharacterSchema = z.object({
  name: z.string().min(1).max(15), // FFXI character name limits
  server: z.string().min(1)
});

export const createCharacter = async (input: unknown) => {
  const validated = CharacterSchema.parse(input);
  return characterService.create(validated);
};
```

### Environment Security
```typescript
// ✅ Use anon key for client (respects RLS)
const supabase = createClient(
  import.meta.env.VITE_SUPABASE_URL,
  import.meta.env.VITE_SUPABASE_ANON_KEY // Safe for client
);

// ❌ Never expose service role key in client code
// const supabase = createClient('url', 'SERVICE_ROLE_KEY');
```

## Testing Patterns

### Mock Supabase for Unit Tests
```typescript
// Mock Supabase for unit tests
export const mockSupabase = () => ({
  from: vi.fn(() => ({
    select: vi.fn(() => ({ data: [], error: null })),
    insert: vi.fn(() => ({ data: {}, error: null })),
    update: vi.fn(() => ({ data: {}, error: null })),
  })),
  auth: {
    getUser: vi.fn(() => ({ data: { user: null }, error: null })),
    signInWithPassword: vi.fn(),
    signUp: vi.fn(),
    signOut: vi.fn(),
  }
});
```

