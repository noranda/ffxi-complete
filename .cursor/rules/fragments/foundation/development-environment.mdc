---
description: 
globs: 
alwaysApply: true
---
# Development Environment Setup

## Required Tools & Versions

### Core Development Tools
```bash
# Node.js (Latest LTS recommended)
node --version  # Should be 18.x or newer

# Yarn (Modern Yarn recommended)
yarn --version  # Should be 1.22.x or newer (Classic Yarn)
# OR for Yarn Berry (v2+):
# yarn --version  # Should be 3.x or newer

# Recommended: Use a Node version manager
# nvm (macOS/Linux) or nvm-windows
nvm use --lts

# Install Yarn if not present
npm install -g yarn
```

### Package Management
```bash
# We use Yarn as the primary package manager
# Always use yarn install for clean installs
yarn install

# For adding dependencies
yarn add <package-name>
yarn add -D <dev-package-name>  # Dev dependencies

# Remove dependencies
yarn remove <package-name>

# Upgrade dependencies
yarn upgrade
```

## IDE Configuration

### VS Code Settings
```json
// .vscode/settings.json
{
  "typescript.preferences.importModuleSpecifier": "relative",
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true,
    "source.organizeImports": true
  },
  "emmet.includeLanguages": {
    "typescript": "html",
    "typescriptreact": "html"
  },
  "tailwindCSS.experimental.classRegex": [
    ["cva\\(([^)]*)\\)", "[\"'`](mdc:[^\"'`]*).*?[\"'`]"],
    ["cx\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"]
  ]
}
```

### Recommended Extensions
```json
// .vscode/extensions.json
{
  "recommendations": [
    "esbenp.prettier-vscode",
    "dbaeumer.vscode-eslint",
    "bradlc.vscode-tailwindcss",
    "ms-vscode.vscode-typescript-next",
    "ms-playwright.playwright",
    "supabase.supabase-vscode"
  ]
}
```

### Cursor-Specific Configuration
```json
// .cursor/settings.json
{
  "cursor.chat.defaultModel": "claude-3.5-sonnet",
  "cursor.composer.defaultModel": "claude-3.5-sonnet",
  "typescript.suggest.autoImports": true,
  "typescript.preferences.includePackageJsonAutoImports": "auto"
}
```

## Local Development Workflow

### Environment Variables Setup
```bash
# .env.local (create this file, never commit it)
VITE_SUPABASE_URL=your_supabase_project_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key

# For development database (optional)
VITE_SUPABASE_URL_DEV=your_dev_database_url
VITE_SUPABASE_ANON_KEY_DEV=your_dev_anon_key
```

### Development Commands
```bash
# Start development server
yarn dev

# Run tests in watch mode
yarn test

# Run type checking
yarn type-check

# Lint and fix
yarn lint
yarn lint:fix

# Build for production
yarn build

# Preview production build
yarn preview
```

### Git Hooks Setup
```bash
# Install pre-commit hooks (if using husky)
yarn dlx husky install

# Add pre-commit hook for linting
yarn dlx husky add .husky/pre-commit "yarn lint-staged"
```

## Database Development

### Supabase CLI Setup
```bash
# Install Supabase CLI globally
yarn global add supabase
# OR use yarn dlx for one-time commands
yarn dlx supabase --help

# Login to Supabase
supabase login

# Link to your project
supabase link --project-ref your-project-id

# Start local development (optional)
supabase start
```

### Database Migration Workflow
```bash
# Generate TypeScript types from schema
supabase gen types typescript --linked > src/types/database.types.ts

# Create a new migration
supabase migration new add_character_table

# Reset local database
supabase db reset

# Apply migrations to remote
supabase db push
```

## Testing Environment

### Vitest Configuration
```typescript
// vitest.config.ts
import { defineConfig } from 'vitest/config';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  test: {
    environment: 'jsdom',
    setupFiles: ['./src/test/setup.ts'],
    globals: true,
  },
});
```

### Test Setup File
```typescript
// src/test/setup.ts
import { beforeAll, afterEach } from 'vitest';
import { cleanup } from '@testing-library/react';
import '@testing-library/jest-dom/vitest';

// Cleanup after each test
afterEach(() => {
  cleanup();
});

// Mock Supabase for tests
beforeAll(() => {
  // Setup test environment
});
```

## Performance Monitoring

### Bundle Analysis
```bash
# Analyze bundle size
yarn build
yarn dlx vite-bundle-analyzer dist
```

### Development Performance
```bash
# Check for dependency updates
yarn dlx npm-check-updates

# Audit for security issues
yarn audit
yarn audit fix
```

## Debugging Setup

### Browser DevTools Configuration
```typescript
// Enable React DevTools in development
if (import.meta.env.DEV) {
  // React DevTools will automatically connect
  console.log('React DevTools available');
}
```

### Network Debugging
```typescript
// Supabase debug mode
const supabase = createClient(url, key, {
  global: {
    fetch: (url, options = {}) => {
      console.log('Supabase request:', url, options);
      return fetch(url, options);
    }
  }
});
```

## Common Development Patterns

### Hot Module Replacement (HMR)
```typescript
// Accept HMR updates for better DX
if (import.meta.hot) {
  import.meta.hot.accept();
}
```

### Environment-Specific Configuration
```typescript
// config/index.ts
export const config = {
  supabase: {
    url: import.meta.env.VITE_SUPABASE_URL,
    anonKey: import.meta.env.VITE_SUPABASE_ANON_KEY,
  },
  isDevelopment: import.meta.env.DEV,
  isProduction: import.meta.env.PROD,
  isTest: import.meta.env.MODE === 'test',
};
```

### Development Utilities
```typescript
// utils/dev.ts - Development helpers
export const devLog = (message: string, data?: any) => {
  if (import.meta.env.DEV) {
    console.log(`[DEV] ${message}`, data);
  }
};

export const devError = (message: string, error?: any) => {
  if (import.meta.env.DEV) {
    console.error(`[DEV ERROR] ${message}`, error);
  }
};
```

## Troubleshooting Common Issues

### TypeScript Issues
```bash
# Clear TypeScript cache
rm -rf node_modules/.cache
npm run type-check

# Restart TypeScript server in VS Code
Cmd/Ctrl + Shift + P -> "TypeScript: Restart TS Server"
```

### Build Issues
```bash
# Clear all caches and reinstall
rm -rf node_modules yarn.lock
yarn install

# Clear Vite cache
rm -rf node_modules/.vite
```

### Database Connection Issues
```typescript
// Test Supabase connection
const testConnection = async () => {
  try {
    const { data, error } = await supabase.from('_test').select('*').limit(1);
    console.log('Supabase connected:', !error);
  } catch (err) {
    console.error('Supabase connection failed:', err);
  }
};
```

## Learning Resources Integration

### Documentation Links
- [Vite Documentation](mdc:https:/vitejs.dev)
- [React Documentation](mdc:https:/react.dev)
- [Supabase Documentation](mdc:https:/supabase.com/docs)
- [TailwindCSS Documentation](mdc:https:/tailwindcss.com/docs)
- [Vitest Documentation](mdc:https:/vitest.dev)

### Debugging Learning
```typescript
// Add debugging helpers for learning
export const debugQuery = (queryKey: string, data: any, error?: any) => {
  if (import.meta.env.DEV) {
    console.group(`🔍 Query: ${queryKey}`);
    console.log('Data:', data);
    if (error) console.error('Error:', error);
    console.groupEnd();
  }
};

export const debugMutation = (mutationKey: string, variables: any, result?: any) => {
  if (import.meta.env.DEV) {
    console.group(`🚀 Mutation: ${mutationKey}`);
    console.log('Variables:', variables);
    console.log('Result:', result);
    console.groupEnd();
  }
};
```

## Success Criteria for Environment Setup

### Checklist for Ready Development Environment
- [ ] Node.js and Yarn installed and working
- [ ] VS Code with recommended extensions
- [ ] Project dependencies installed (`yarn install`)
- [ ] Environment variables configured
- [ ] Supabase connection working
- [ ] TypeScript compilation working
- [ ] Linting and formatting working
- [ ] Tests can run successfully
- [ ] Hot reload working in development
- [ ] Git hooks configured (if using)

### Validation Commands
```bash
# Validate environment setup
yarn type-check  # TypeScript is working
yarn lint        # ESLint is working  
yarn test        # Vitest + React Testing Library working
yarn build       # Build process is working
```
