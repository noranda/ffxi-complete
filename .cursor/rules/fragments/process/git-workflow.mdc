---
description: "Git workflow, branch naming, and commit message conventions"
globs:
  - ".git/**"
  - "**/.gitignore"
  - "**/CONTRIBUTING.md"
---

# Git Workflow

## Branch Naming Conventions

- `feat/feature-name` - New features
- `fix/bug-description` - Bug fixes
- `refactor/component-name` - Code refactoring
- `docs/documentation-update` - Documentation changes
- `test/test-description` - Test additions/updates
- `chore/maintenance-task` - Maintenance tasks

## Commit Message Format (Required)

**Conventional Commits pattern:**

```text
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Commit Types

- **feat**: New feature
- **fix**: Bug fix
- **docs**: Documentation only
- **style**: Formatting changes (no code meaning change)
- **refactor**: Code change that neither fixes bug nor adds feature
- **test**: Adding or updating tests
- **chore**: Build process or tool changes

### Message Guidelines

- **Subject line**: 50 characters or less
- **Imperative mood**: "Add feature" not "Added feature"
- **No period**: Don't end subject with period
- **Body**: Wrap at 72 characters, explain what and why

### Examples

**Simple commits:**

```bash
feat: add character creation form
fix: resolve tab navigation keyboard accessibility
docs: update installation instructions
refactor: extract authentication logic to custom hook
test: add unit tests for Button component
chore: update dependencies to latest versions
```

**With scope:**

```bash
feat(auth): add OAuth login
fix(ui): resolve button hover states
test(components): add Card component tests
```

**With body:**

```bash
feat: implement character portrait picker

Add component for selecting character portraits during character
creation. Supports filtering by race and gender with optimized
image loading.

Closes #123
```

**Breaking change:**

```bash
feat!: migrate to React 19

BREAKING CHANGE: Requires Node.js 18+ and updates component APIs
for automatic ref handling.
```

## Best Practices

- **Atomic commits**: One logical change per commit
- **Frequent commits**: Commit early and often
- **Meaningful messages**: Explain the why, not just the what
- **Reference issues**: Link to relevant tickets
- **Test before commit**: Ensure all tests pass
- **Review required**: All changes need review before merging
