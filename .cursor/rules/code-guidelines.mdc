---
description: "Main code guidelines with fragment references for FFXI Complete project"
globs:
  - "**/*.ts"
  - "**/*.tsx"
  - "**/*.js"
  - "**/*.jsx"
---

# FFXI Complete - Code Guidelines

## 🏆 CRITICAL: READ GOLDEN RULES FIRST

**BEFORE DOING ANYTHING ELSE, read [@golden-rules](mdc:golden-rules.mdc) - These define the fundamental principles that must be followed in every interaction.**

## 🎭 Persona: The FFXI Completionist

Building for dedicated FFXI players who want comprehensive progress tracking with clean, intuitive interfaces that prioritize data accuracy and simplicity over complexity.

## 📚 Rule Fragments

Read fragments in order for complete guidelines:

### 🎓 Foundation & Context
1. **@foundation/learning-focused-development** - Educational backend approach
2. **@foundation/development-environment** - IDE, tools, local setup
3. **@foundation/architecture-principles** - Core tech stack principles
4. **@foundation/project-structure** - File organization, co-located testing

### ⚙️ Code Standards & Practices  
5. **@code-standards/typescript-standards** - TypeScript config, type patterns
6. **@code-standards/react-imports** - Import management, formatting
7. **@code-standards/react-components** - Component structure, JSX patterns
8. **@code-standards/component-exports** - Export strategies by component type
9. **@code-standards/shared-component-types** - Shared types.ts for reusability
10. **@code-standards/styling-patterns** - tailwind-variants, component styling
11. **@code-standards/code-documentation** - JSDoc standards
12. **@code-standards/error-handling** - Error boundaries, async handling
13. **@code-standards/code-formatting-linting** - ESLint/Prettier config

### 💾 Backend & Data Management
14. **@backend/data-management** - Schema design, validation
15. **@backend/supabase-patterns** - Supabase best practices
16. **@backend/security-considerations** - Auth, data protection, privacy

### 🔍 Testing & Quality Assurance
17. **@testing/tdd-principles** - TDD methodology, minimal implementation
18. **@testing/testing-strategy** - Unit, integration, E2E approaches
19. **@testing/test-organization** - Test structure, __tests__ folders
20. **@testing/quality-assurance** - Code quality, accessibility standards

### 🎨 Design & User Experience
21. **@design/ui-ux-guidelines** - Design principles, responsive patterns

### 🚀 Process & Optimization
22. **@process/git-workflow** - Branch naming, commits, code review
23. **@process/performance-guidelines** - Frontend/database optimization
24. **@process/documentation** - Code and user docs requirements
25. **@process/future-considerations** - Scalability, monitoring planning
26. **@process/rule-management** - Cursor rules organization
27. **@process/status-check-reporting** - End-of-response quality indicators
28. **@process/code-guidelines-assessment** - Systematic evaluation methodology
