---
description: 
globs: 
alwaysApply: false
---
# Task List Management

Guidelines for managing task lists in markdown files to track progress on completing a PRD

## Task Implementation
- **One sub-task at a time:** Do **NOT** start the next sub-task until you ask the user for permission and they say "yes" or "y"
- **Quality checks after each sub-task:** After completing any sub-task, ALWAYS run:
  1. `yarn lint:fix` - Auto-fix ESLint errors and check for remaining issues
  2. `yarn prettier --write .` - Format all code according to Prettier config
  3. `yarn test` (if tests exist) - Run existing tests
  4. `yarn build` (if appropriate) - Verify build still works
  5. **Code Guidelines Verification** - Check that all code changes follow our established standards:
     - **React Import Standards:** NO global React imports (`import * as React` or `import React`), only specific imports (`import {useState}`)
     - **React Components:** Use `const ComponentName: React.FC<PropsType>` pattern (NOT function declarations)
     - **Type Definitions:** Define props types OUTSIDE component definition, export alongside components
     - **Styling:** Use `tailwind-variants` (tv) NOT `class-variance-authority` (cva) for component variants
     - **Comments:** All exported components, functions, and types must have JSDoc comments with examples
     - **Import Formatting:** Use `{item}` not `{ item }` (bracketSpacing: false)
     - **Props:** Alphabetically sorted in component parameters AND in JSX attributes
     - **JSX:** Newlines between sibling elements, prefer <div> for text content
     - **Types:** Use types over interfaces for object shapes
     - **Code Style:** Single quotes for strings, semicolons after statements
- **Code Guidelines Review:** Before completing any sub-task:
  1. Review all modified files against code-standards.mdc and code-formatting-linting.mdc
  2. Verify React.FC usage, import formatting, prop sorting, and type definitions
  3. Fix any violations immediately
- **Acceptable temporary issues:** Lint/test failures are acceptable ONLY if:
  - You explicitly know they will be resolved by the end of the current parent task
  - You document the known issues and resolution plan
- **TDD emphasis:** When implementing features (not setup tasks), follow Test-Driven Development:
  - Write tests FIRST before implementation
  - Implement minimal code to make tests pass
  - Refactor while keeping tests green
- **Completion protocol:**  
  1. When you finish a **sub-task**, immediately mark it as completed by changing `[ ]` to `[x]`.  
  2. If **all** subtasks underneath a parent task are now `[x]`, also mark the **parent task** as completed.  
- Stop after each sub-task and wait for the user's go-ahead.

## Task List Maintenance

1. **Update the task list as you work:**
   - Mark tasks and subtasks as completed (`[x]`) per the protocol above.
   - Add new tasks as they emerge.

2. **Maintain the "Relevant Files" section:**
   - List every file created or modified.
   - Give each file a one-line description of its purpose.

## AI Instructions

When working with task lists, the AI must:

1. Regularly update the task list file after finishing any significant work.
2. Follow the completion protocol:
   - Mark each finished **sub-task** `[x]`.
   - Mark the **parent task** `[x]` once **all** its subtasks are `[x]`.
3. Add newly discovered tasks.
4. Keep "Relevant Files" accurate and up to date.
5. Before starting work, check which sub-task is next.
6. After implementing a sub-task, run quality checks (`yarn lint:fix`, `yarn prettier --write .`, `yarn test`, `yarn build`), verify code guidelines compliance, update the file, and then pause for user approval.
7. **MANDATORY Code Guidelines Check:** Every code change must be verified against:
   - **React imports:** No global React imports, use specific function imports only
   - **React component patterns:** React.FC usage, external type definitions
   - **Styling libraries:** tailwind-variants (tv) instead of class-variance-authority (cva)
   - **Documentation:** JSDoc comments for all exported items with examples
   - **Import/export formatting:** No bracket spacing, alphabetical sorting
   - **Type definitions:** Prefer types over interfaces for object shapes
   - **JSX formatting:** Alphabetical prop sorting in component parameters AND JSX attributes, newlines between siblings, <div> for text
   - **General TypeScript standards:** Single quotes, semicolons, strict typing